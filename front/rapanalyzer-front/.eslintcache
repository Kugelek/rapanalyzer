[{"C:\\Users\\Kugelek\\Desktop\\repos\\rapanalyzer\\front\\rapanalyzer-front\\src\\index.tsx":"1","C:\\Users\\Kugelek\\Desktop\\repos\\rapanalyzer\\front\\rapanalyzer-front\\src\\reportWebVitals.ts":"2","C:\\Users\\Kugelek\\Desktop\\repos\\rapanalyzer\\front\\rapanalyzer-front\\src\\App.tsx":"3","C:\\Users\\Kugelek\\Desktop\\repos\\rapanalyzer\\front\\rapanalyzer-front\\src\\components\\Home.tsx":"4","C:\\Users\\Kugelek\\Desktop\\repos\\rapanalyzer\\front\\rapanalyzer-front\\src\\components\\BarChart\\BarChart.tsx":"5","C:\\Users\\Kugelek\\Desktop\\repos\\rapanalyzer\\front\\rapanalyzer-front\\src\\components\\SentimentFace\\SentimentFace.tsx":"6","C:\\Users\\Kugelek\\Desktop\\repos\\rapanalyzer\\front\\rapanalyzer-front\\src\\components\\DonutChart\\DonutChart.tsx":"7","C:\\Users\\Kugelek\\Desktop\\repos\\rapanalyzer\\front\\rapanalyzer-front\\src\\components\\PropagateLoader\\PropagateLoader.tsx":"8"},{"size":500,"mtime":1608844693987,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1608844693987,"results":"11","hashOfConfig":"10"},{"size":182,"mtime":1608906807270,"results":"12","hashOfConfig":"10"},{"size":5260,"mtime":1609266504762,"results":"13","hashOfConfig":"10"},{"size":1033,"mtime":1609263196552,"results":"14","hashOfConfig":"10"},{"size":954,"mtime":1609263995612,"results":"15","hashOfConfig":"10"},{"size":1505,"mtime":1609264565649,"results":"16","hashOfConfig":"10"},{"size":716,"mtime":1609266225791,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"26j2z6",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},"C:\\Users\\Kugelek\\Desktop\\repos\\rapanalyzer\\front\\rapanalyzer-front\\src\\index.tsx",[],["39","40"],"C:\\Users\\Kugelek\\Desktop\\repos\\rapanalyzer\\front\\rapanalyzer-front\\src\\reportWebVitals.ts",[],"C:\\Users\\Kugelek\\Desktop\\repos\\rapanalyzer\\front\\rapanalyzer-front\\src\\App.tsx",[],"C:\\Users\\Kugelek\\Desktop\\repos\\rapanalyzer\\front\\rapanalyzer-front\\src\\components\\Home.tsx",["41","42"],"import React,{FunctionComponent, useState, useEffect} from 'react';\r\nimport './Home.modules.scss';\r\nimport './Analysis.modules.scss';\r\nimport { AutoComplete } from 'antd';\r\nimport axios, {AxiosResponse, AxiosRequestConfig} from 'axios';\r\nimport BarChart from './BarChart/BarChart';\r\nimport SentimentFace from './SentimentFace/SentimentFace';\r\nimport DonutChart from './DonutChart/DonutChart';\r\nimport PropagateLoader from './PropagateLoader/PropagateLoader';\r\nexport interface HomeProps {\r\n    \r\n}\r\ninterface AnalysisData  {\r\n  title:string;\r\n  author:string;\r\n  sentiment:number;\r\n  topFiveWords: Array<topWord>;\r\n  lyrics: string;\r\n}\r\ninterface topWord {\r\n  word:string;\r\n  count:number;\r\n}\r\n\r\nconst Home: FunctionComponent<HomeProps> = () => {\r\n    const [value, setValue] = useState('');\r\n    const [options, setOptions] = useState<{ value: string }[]>([]);\r\n    const [optionsFullData, setOptionsFullData] = useState([]);\r\n    const [chosen, setChosen] = useState('');\r\n    const [analysis, setAnalysis] = useState<AnalysisData>({  \r\n      title: \"\",\r\n      author: \"\",\r\n      sentiment: 0,\r\n      topFiveWords: [],\r\n      lyrics: \"\"});\r\n\r\n    const [loadingSearch, setLoadingSearch] = useState(false);\r\n    const [loadingAnalysis, setLoadingAnalysis] = useState(false);\r\n\r\n    const fetchSearchResults = async (searchParam:string ): Promise<any> => {\r\n      console.log(searchParam);\r\n      if(!searchParam || searchParam.length < 2)\r\n        return;\r\n      setLoadingSearch(true);\r\n      const body:any = {\r\n        query: searchParam\r\n      }\r\n      console.log(body);\r\n      axios.get(\"/api/search\",{params: body})\r\n        .then((resp: AxiosResponse) => {\r\n          console.log(resp.data);\r\n          setOptionsFullData(resp.data);\r\n          setLoadingSearch(false);\r\n          return resp.data;\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    const fetchAnalysis = async (): Promise<any> => {\r\n     \r\n     setLoadingAnalysis(true);\r\n      const [title, author] = chosen.split(\" by \");\r\n      console.log(title);\r\n      console.log(author);\r\n      const body:any = {\r\n        title: title,\r\n        author: author\r\n      }\r\n      // console.log(body);\r\n      axios.get(\"/api/analysis\",{params: body})\r\n        .then((resp: AxiosResponse) => {\r\n          console.log(resp.data);\r\n          setAnalysis(resp.data);\r\n          setLoadingAnalysis(false);\r\n          return resp.data;\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    \r\n\r\n    const onSearch = async (searchText: string) => {\r\n        \r\n         await fetchSearchResults(value);\r\n        setOptions(\r\n          !value  ? [] : optionsFullData.map((song:any) => {return {value: song.title +\" by \" + song.artist.name}}),\r\n        );\r\n      };\r\n\r\n      const onSelect = (data: string) => {\r\n        // console.log('onSelect', data);\r\n        setChosen(data);\r\n      };\r\n      const onChange = (data: string) => {\r\n        setValue(data);\r\n      };\r\n    return ( \r\n        <div className=\"main-bg\">\r\n\r\n       \r\n        <main className=\"mainbox\">\r\n            <h1 className=\"mainbox__heading\">Analyze a song!</h1>\r\n            <h3 className=\"mainbox__heading mainbox__heading--small\">\r\n                Pick a song from Genius.com to discover the unknown\r\n            </h3>\r\n            <AutoComplete\r\n        value={value}\r\n        options={options}\r\n        style={{ width: 300 }}\r\n        onSelect={onSelect}\r\n        onSearch={onSearch}\r\n        onChange={onChange}\r\n        placeholder=\"Find a song...\"\r\n      />\r\n      {loadingSearch ?  <PropagateLoader/> : null}\r\n\r\n      {chosen ? \r\n      <>\r\n      <p className=\"picked\">Picked song:</p>\r\n        <div className=\"mainbox__chosen\">\r\n        \r\n        <p className=\"mainbox__chosen-title\">{chosen}</p>\r\n        <button className=\"mainbox__submit\" onClick={fetchAnalysis}>Analyze</button>\r\n        </div>\r\n        \r\n      </>\r\n      : null\r\n      }\r\n      {loadingAnalysis ?  <PropagateLoader/> : null}\r\n\r\n      {analysis && analysis.topFiveWords.length === 5 ?\r\n        <div className=\"analysis-box\">\r\n          <div className=\"analysis-box__intro\">\r\n            <div className=\"analysis-box__left\">\r\n            <p className=\"analysis-box__pre\">Song title:</p>\r\n            <h5 className=\"analysis-box__title\">{analysis.title}</h5>\r\n            <p className=\"analysis-box__pre\">Author:</p>\r\n            <h5 className=\"analysis-box__author\">{analysis.author}</h5>\r\n            <p className=\"analysis-box__pre\">Words used:</p>\r\n            <h5 className=\"analysis-box__author\">{analysis.lyrics.split(\" \").length}</h5>\r\n            </div>\r\n            <SentimentFace sentiment={analysis.sentiment}/>\r\n          </div>\r\n      \r\n          <h3 className=\"barchart__heading\">Top 5 most used words</h3>\r\n          <BarChart topWordsData={analysis.topFiveWords}/>\r\n\r\n          <h3 className=\"donutchart__heading\">Percentage of most used words in lyrics</h3>\r\n          <DonutChart topWordsData={analysis.topFiveWords} allWords={analysis.lyrics.split(\" \").length}/>\r\n\r\n          <h3 className=\"lyrics__heading\">Analyzed concatenated lyrics</h3>\r\n          <p>{analysis.lyrics}</p>\r\n        \r\n        </div>\r\n        : null\r\n      }\r\n      \r\n        </main>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Home;","C:\\Users\\Kugelek\\Desktop\\repos\\rapanalyzer\\front\\rapanalyzer-front\\src\\components\\BarChart\\BarChart.tsx",[],"C:\\Users\\Kugelek\\Desktop\\repos\\rapanalyzer\\front\\rapanalyzer-front\\src\\components\\SentimentFace\\SentimentFace.tsx",[],"C:\\Users\\Kugelek\\Desktop\\repos\\rapanalyzer\\front\\rapanalyzer-front\\src\\components\\DonutChart\\DonutChart.tsx",["43","44"],"import React,{FunctionComponent} from 'react';\r\n\r\nimport {\r\n  RadialChart\r\n} from 'react-vis';\r\n\r\nimport \"./DonutChart.modules.scss\";\r\n\r\n\r\n\r\ninterface topWord {\r\n    word:string;\r\n    count:number;\r\n  }\r\n  \r\n    export interface DonutChartProps {\r\n      topWordsData:Array<topWord>;\r\n      allWords:number;\r\n  }\r\n\r\n\r\nconst DonutChart: FunctionComponent<DonutChartProps> = (props) => {\r\n    \r\n const myData = [{angle: 1,label:\"xd\"}, {angle: 5, padAngle: 35, label:\"xd\"}, {angle: 2}]\r\n const topWordsCountSum = props.topWordsData\r\n  .map(el => el.count)\r\n  .reduce((a,b) => a+b, 0);\r\n    let  data = props.topWordsData.map(wordObj => {\r\n        return {\r\n            angle: wordObj.count / props.allWords,\r\n            label: wordObj.word,\r\n            subLabel: `${Math.ceil((wordObj.count / props.allWords) * 100)}%`\r\n        }\r\n    });\r\n    const others = {\r\n            angle: (props.allWords - topWordsCountSum) / props.allWords,\r\n            label: `other words`,\r\n            subLabel: `${Math.ceil((props.allWords - topWordsCountSum) / props.allWords * 100)}%`\r\n        }\r\n       const finalData = data.push(others);\r\n    return (\r\n      <>\r\n        <div>\r\n            \r\n          <RadialChart\r\n          className=\"donut-chart\"\r\n  data={data}\r\n  width={300}\r\n  height={300} \r\n  padAngle={0.02}\r\n\r\n  showLabels={true}\r\n  labelsAboveChildren={true}\r\n  >\r\n      <div className=\"center-circle\"></div>\r\n  </RadialChart>\r\n        </div>\r\n        \r\n        </>\r\n      );\r\n  }\r\n\r\nexport default DonutChart;","C:\\Users\\Kugelek\\Desktop\\repos\\rapanalyzer\\front\\rapanalyzer-front\\src\\components\\PropagateLoader\\PropagateLoader.tsx",["45"],"import React from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Loader from \"react-spinners/PropagateLoader\";\r\n \r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\n  display: block;\r\n  margin: 1rem auto;\r\n  height: 1rem;\r\n  width: 1rem;\r\n  opacity: 1;\r\n\r\n`;\r\n \r\nclass PropagateLoader extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"sweet-loading\">\r\n        <Loader\r\n          css={override}\r\n          size={15}\r\n           color={\"#ffffff\"}\r\n        //   color={\"#5B6BE7\"}\r\n          loading={true}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PropagateLoader;",["46","47"],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":44,"nodeType":"54","messageId":"55","endLine":1,"endColumn":53},{"ruleId":"52","severity":1,"message":"56","line":5,"column":31,"nodeType":"54","messageId":"55","endLine":5,"endColumn":49},{"ruleId":"52","severity":1,"message":"57","line":24,"column":8,"nodeType":"54","messageId":"55","endLine":24,"endColumn":14},{"ruleId":"52","severity":1,"message":"58","line":40,"column":14,"nodeType":"54","messageId":"55","endLine":40,"endColumn":23},{"ruleId":"52","severity":1,"message":"59","line":3,"column":8,"nodeType":"54","messageId":"55","endLine":3,"endColumn":18},{"ruleId":"48","replacedBy":"60"},{"ruleId":"50","replacedBy":"61"},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'AxiosRequestConfig' is defined but never used.","'myData' is assigned a value but never used.","'finalData' is assigned a value but never used.","'ClipLoader' is defined but never used.",["62"],["63"],"no-global-assign","no-unsafe-negation"]